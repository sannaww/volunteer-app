{"ast":null,"code":"/*import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ user }) {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversation, setActiveConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n    \r\n    // Опрос новых сообщений каждые 5 секунд\r\n    const interval = setInterval(() => {\r\n      if (activeConversation) {\r\n        fetchMessages();\r\n      }\r\n      fetchConversations();\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [activeConversation]);\r\n\r\n  const fetchConversations = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.get('http://localhost:3000/api/messages/conversations', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setConversations(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке диалогов:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async () => {\r\n    if (!activeConversation) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const url = activeConversation.project \r\n        ? `http://localhost:3000/api/messages/conversation/${activeConversation.user.id}/${activeConversation.project.id}`\r\n        : `http://localhost:3000/api/messages/conversation/${activeConversation.user.id}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setMessages(response.data);\r\n      scrollToBottom();\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке сообщений:', error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleSelectConversation = (conversation) => {\r\n    setActiveConversation(conversation);\r\n    setMessages([]);\r\n    fetchMessages();\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || !activeConversation) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const messageData = {\r\n        receiverId: activeConversation.user.id,\r\n        text: newMessage.trim()\r\n      };\r\n\r\n      if (activeConversation.project) {\r\n        messageData.projectId = activeConversation.project.id;\r\n      }\r\n\r\n      await axios.post('http://localhost:3000/api/messages', messageData, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n\r\n      setNewMessage('');\r\n      fetchMessages();\r\n      fetchConversations();\r\n    } catch (error) {\r\n      console.error('Ошибка при отправке сообщения:', error);\r\n      alert('Не удалось отправить сообщение');\r\n    }\r\n  };\r\n\r\n  const formatTime = (dateString) => {\r\n    return new Date(dateString).toLocaleTimeString('ru-RU', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"chat-loading\">Загрузка чата...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-sidebar\">\r\n        <div className=\"chat-header\">\r\n          <h3>Сообщения</h3>\r\n        </div>\r\n        <div className=\"conversations-list\">\r\n          {conversations.length === 0 ? (\r\n            <div className=\"no-conversations\">\r\n              <p>Нет сообщений</p>\r\n            </div>\r\n          ) : (\r\n            conversations.map(conv => (\r\n              <div\r\n                key={`${conv.user.id}_${conv.project?.id || 'no_project'}`}\r\n                className={`conversation-item ${activeConversation?.user.id === conv.user.id && activeConversation?.project?.id === conv.project?.id ? 'active' : ''}`}\r\n                onClick={() => handleSelectConversation(conv)}\r\n              >\r\n                <div className=\"conversation-avatar\">\r\n                  {conv.user.firstName[0]}{conv.user.lastName[0]}\r\n                </div>\r\n                <div className=\"conversation-info\">\r\n                  <div className=\"conversation-header\">\r\n                    <span className=\"conversation-name\">\r\n                      {conv.user.firstName} {conv.user.lastName}\r\n                    </span>\r\n                    <span className=\"conversation-time\">\r\n                      {formatTime(conv.lastMessage.createdAt)}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"conversation-preview\">\r\n                    {conv.project && (\r\n                      <span className=\"project-badge\">{conv.project.title}</span>\r\n                    )}\r\n                    <span className=\"message-preview\">\r\n                      {conv.lastMessage.text.length > 30 \r\n                        ? conv.lastMessage.text.substring(0, 30) + '...'\r\n                        : conv.lastMessage.text\r\n                      }\r\n                    </span>\r\n                  </div>\r\n                  {conv.unreadCount > 0 && (\r\n                    <span className=\"unread-badge\">{conv.unreadCount}</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-main\">\r\n        {activeConversation ? (\r\n          <>\r\n            <div className=\"chat-header\">\r\n              <div className=\"chat-partner-info\">\r\n                <h4>{activeConversation.user.firstName} {activeConversation.user.lastName}</h4>\r\n                {activeConversation.project && (\r\n                  <span className=\"project-name\">Проект: {activeConversation.project.title}</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"messages-container\">\r\n              {messages.map(message => (\r\n                <div\r\n                  key={message.id}\r\n                  className={`message ${message.senderId === user.id ? 'sent' : 'received'}`}\r\n                >\r\n                  <div className=\"message-content\">\r\n                    <p>{message.text}</p>\r\n                    <span className=\"message-time\">\r\n                      {formatTime(message.createdAt)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            <form className=\"message-input-form\" onSubmit={handleSendMessage}>\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                placeholder=\"Введите сообщение...\"\r\n                className=\"message-input\"\r\n              />\r\n              <button type=\"submit\" className=\"send-button\">\r\n                Отправить\r\n              </button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-chat-selected\">\r\n            <p>Выберите диалог для начала общения</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;*/","map":{"version":3,"names":[],"sources":["C:/Users/emili/OneDrive/Рабочий стол/volonters/frontend/src/components/Chat.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ user }) {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversation, setActiveConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n    \r\n    // Опрос новых сообщений каждые 5 секунд\r\n    const interval = setInterval(() => {\r\n      if (activeConversation) {\r\n        fetchMessages();\r\n      }\r\n      fetchConversations();\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [activeConversation]);\r\n\r\n  const fetchConversations = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.get('http://localhost:3000/api/messages/conversations', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setConversations(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке диалогов:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async () => {\r\n    if (!activeConversation) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const url = activeConversation.project \r\n        ? `http://localhost:3000/api/messages/conversation/${activeConversation.user.id}/${activeConversation.project.id}`\r\n        : `http://localhost:3000/api/messages/conversation/${activeConversation.user.id}`;\r\n\r\n      const response = await axios.get(url, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      setMessages(response.data);\r\n      scrollToBottom();\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке сообщений:', error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleSelectConversation = (conversation) => {\r\n    setActiveConversation(conversation);\r\n    setMessages([]);\r\n    fetchMessages();\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || !activeConversation) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const messageData = {\r\n        receiverId: activeConversation.user.id,\r\n        text: newMessage.trim()\r\n      };\r\n\r\n      if (activeConversation.project) {\r\n        messageData.projectId = activeConversation.project.id;\r\n      }\r\n\r\n      await axios.post('http://localhost:3000/api/messages', messageData, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n\r\n      setNewMessage('');\r\n      fetchMessages();\r\n      fetchConversations();\r\n    } catch (error) {\r\n      console.error('Ошибка при отправке сообщения:', error);\r\n      alert('Не удалось отправить сообщение');\r\n    }\r\n  };\r\n\r\n  const formatTime = (dateString) => {\r\n    return new Date(dateString).toLocaleTimeString('ru-RU', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"chat-loading\">Загрузка чата...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-sidebar\">\r\n        <div className=\"chat-header\">\r\n          <h3>Сообщения</h3>\r\n        </div>\r\n        <div className=\"conversations-list\">\r\n          {conversations.length === 0 ? (\r\n            <div className=\"no-conversations\">\r\n              <p>Нет сообщений</p>\r\n            </div>\r\n          ) : (\r\n            conversations.map(conv => (\r\n              <div\r\n                key={`${conv.user.id}_${conv.project?.id || 'no_project'}`}\r\n                className={`conversation-item ${activeConversation?.user.id === conv.user.id && activeConversation?.project?.id === conv.project?.id ? 'active' : ''}`}\r\n                onClick={() => handleSelectConversation(conv)}\r\n              >\r\n                <div className=\"conversation-avatar\">\r\n                  {conv.user.firstName[0]}{conv.user.lastName[0]}\r\n                </div>\r\n                <div className=\"conversation-info\">\r\n                  <div className=\"conversation-header\">\r\n                    <span className=\"conversation-name\">\r\n                      {conv.user.firstName} {conv.user.lastName}\r\n                    </span>\r\n                    <span className=\"conversation-time\">\r\n                      {formatTime(conv.lastMessage.createdAt)}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"conversation-preview\">\r\n                    {conv.project && (\r\n                      <span className=\"project-badge\">{conv.project.title}</span>\r\n                    )}\r\n                    <span className=\"message-preview\">\r\n                      {conv.lastMessage.text.length > 30 \r\n                        ? conv.lastMessage.text.substring(0, 30) + '...'\r\n                        : conv.lastMessage.text\r\n                      }\r\n                    </span>\r\n                  </div>\r\n                  {conv.unreadCount > 0 && (\r\n                    <span className=\"unread-badge\">{conv.unreadCount}</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-main\">\r\n        {activeConversation ? (\r\n          <>\r\n            <div className=\"chat-header\">\r\n              <div className=\"chat-partner-info\">\r\n                <h4>{activeConversation.user.firstName} {activeConversation.user.lastName}</h4>\r\n                {activeConversation.project && (\r\n                  <span className=\"project-name\">Проект: {activeConversation.project.title}</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"messages-container\">\r\n              {messages.map(message => (\r\n                <div\r\n                  key={message.id}\r\n                  className={`message ${message.senderId === user.id ? 'sent' : 'received'}`}\r\n                >\r\n                  <div className=\"message-content\">\r\n                    <p>{message.text}</p>\r\n                    <span className=\"message-time\">\r\n                      {formatTime(message.createdAt)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            <form className=\"message-input-form\" onSubmit={handleSendMessage}>\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                placeholder=\"Введите сообщение...\"\r\n                className=\"message-input\"\r\n              />\r\n              <button type=\"submit\" className=\"send-button\">\r\n                Отправить\r\n              </button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-chat-selected\">\r\n            <p>Выберите диалог для начала общения</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}