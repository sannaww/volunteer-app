import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './OrganizerStats.css';

function OrganizerStats({ user }) {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchStats();
    } else {
      setLoading(false);
    }
  }, [user]);

  const fetchStats = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('http://localhost:3000/api/organizer/stats', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      setStats(response.data);
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ö—É–∫–æ–≤
  if (!user) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</div>;
  }

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>;
  }

  if (!stats) {
    return <div className="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</div>;
  }

  const getStatusText = (status) => {
    const statusMap = {
      'PENDING': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
      'APPROVED': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞',
      'REJECTED': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
      'DRAFT': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
      'ACTIVE': 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π',
      'COMPLETED': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
      'CANCELLED': 'üî¥ –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
  };

  return (
    <div className="organizer-stats">
      <div className="stats-header">
        <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞</h2>
        <button className="btn-refresh" onClick={fetchStats}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      <div className="stats-grid">
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
        <div className="stat-card">
          <div className="stat-icon">üìä</div>
          <div className="stat-content">
            <h3>{stats.projects.total}</h3>
            <p>–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–æ–∫ */}
        <div className="stat-card">
          <div className="stat-icon">üì®</div>
          <div className="stat-content">
            <h3>{stats.applications.total}</h3>
            <p>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</p>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ */}
        <div className="stat-card">
          <div className="stat-icon">üë•</div>
          <div className="stat-content">
            <h3>{stats.applications.uniqueVolunteers}</h3>
            <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤</p>
          </div>
        </div>

        {/* –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç */}
        {stats.popularProject && (
          <div className="stat-card">
            <div className="stat-icon">üî•</div>
            <div className="stat-content">
              <h3>{stats.popularProject.applicationsCount}</h3>
              <p>–ó–∞—è–≤–æ–∫ –Ω–∞ "{stats.popularProject.title}"</p>
            </div>
          </div>
        )}
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="detailed-stats">
        <div className="stats-section">
          <h3>–ü—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h3>
          <div className="status-stats">
            {Object.entries(stats.projects.byStatus).map(([status, count]) => (
              <div key={status} className="status-item">
                <span className="status-label">{getStatusText(status)}</span>
                <span className="status-count">{count}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="stats-section">
          <h3>–ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h3>
          <div className="status-stats">
            {Object.entries(stats.applications.byStatus).map(([status, count]) => (
              <div key={status} className="status-item">
                <span className="status-label">{getStatusText(status)}</span>
                <span className="status-count">{count}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ */}
      {stats.recentApplications.length > 0 && (
        <div className="recent-applications">
          <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏</h3>
          <div className="applications-list">
            {stats.recentApplications.map(app => (
              <div key={app.id} className="application-item">
                <div className="app-info">
                  <strong>{app.volunteerName}</strong>
                  <span> –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ "{app.projectTitle}"</span>
                </div>
                <div className="app-meta">
                  <span className={`status status-${app.status.toLowerCase()}`}>
                    {getStatusText(app.status)}
                  </span>
                  <span>{new Date(app.createdAt).toLocaleDateString()}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {stats.projects.total === 0 && (
        <div className="empty-stats">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>
          <button 
            className="btn btn-primary"
            onClick={() => window.location.href = '/create-project'}
          >
            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
          </button>
        </div>
      )}
    </div>
  );
}

export default OrganizerStats;