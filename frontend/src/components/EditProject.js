import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import './CreateProject.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

function EditProject({ user }) {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    status: 'DRAFT',
    startDate: '',
    endDate: '',
    location: '',
    projectType: '',
    volunteersRequired: 1,
    contactInfo: ''
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  const projectTypes = [
    { value: 'ECOLOGY', label: 'üå± –≠–∫–æ–ª–æ–≥–∏—è' },
    { value: 'ANIMAL_WELFARE', label: 'üêæ –ó–∞—â–∏—Ç–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö' },
    { value: 'EDUCATION', label: 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
    { value: 'SOCIAL', label: '‚ù§Ô∏è –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å' },
    { value: 'CULTURAL', label: 'üé® –ö—É–ª—å—Ç—É—Ä–∞' },
    { value: 'SPORTS', label: '‚öΩ –°–ø–æ—Ä—Ç' },
    { value: 'MEDICAL', label: 'üè• –ú–µ–¥–∏—Ü–∏–Ω–∞' },
    { value: 'OTHER', label: 'üîß –î—Ä—É–≥–æ–µ' }
  ];

  useEffect(() => {
    fetchProject();
  }, [id]);

  const fetchProject = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/api/projects/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const project = response.data;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
      let formattedContactInfo = project.contactInfo || '';
      if (formattedContactInfo && !formattedContactInfo.includes('@')) {
        formattedContactInfo = formatPhoneForInput(formattedContactInfo);
      }

      setFormData({
        title: project.title,
        description: project.description,
        status: project.status,
        startDate: project.startDate ? new Date(project.startDate).toISOString().split('T')[0] : '',
        endDate: project.endDate ? new Date(project.endDate).toISOString().split('T')[0] : '',
        location: project.location || '',
        projectType: project.projectType || '',
        volunteersRequired: project.volunteersRequired || 1,
        contactInfo: formattedContactInfo
      });
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç');
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const formatPhoneForInput = (phone) => {
    if (!phone) return '';
    
    let cleaned = phone.replace(/\D/g, '');
    
    if (cleaned.startsWith('8')) {
      cleaned = '+7' + cleaned.substring(1);
    } else if (cleaned.startsWith('7') && !cleaned.startsWith('+7')) {
      cleaned = '+7' + cleaned.substring(1);
    } else if (!cleaned.startsWith('+')) {
      cleaned = '+7' + cleaned;
    }
    
    if (cleaned.length > 12) {
      cleaned = cleaned.substring(0, 12);
    }
    
    return cleaned;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleContactInfoChange = (e) => {
    const { value } = e.target;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ email
    if (value.includes('@')) {
      // –≠—Ç–æ email, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      setFormData(prevState => ({
        ...prevState,
        contactInfo: value
      }));
    } else {
      // –≠—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
      let cleanedValue = value.replace(/[^\d+]/g, '');
      
      if (cleanedValue.startsWith('8')) {
        cleanedValue = '+7' + cleanedValue.substring(1);
      } else if (cleanedValue.startsWith('7') && !cleanedValue.startsWith('+7')) {
        cleanedValue = '+7' + cleanedValue.substring(1);
      } else if (!cleanedValue.startsWith('+')) {
        cleanedValue = '+7' + cleanedValue;
      }
      
      if (cleanedValue.length > 12) {
        cleanedValue = cleanedValue.substring(0, 12);
      }
      
      setFormData(prevState => ({
        ...prevState,
        contactInfo: cleanedValue
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    try {
      const token = localStorage.getItem('token');
      const dataToSend = {
        ...formData,
        volunteersRequired: parseInt(formData.volunteersRequired),
        startDate: formData.startDate || null,
        endDate: formData.endDate || null
      };

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', dataToSend); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      await axios.put(`${API_URL}/api/projects/${id}`, dataToSend, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      alert('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      navigate('/profile');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
      alert(error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...</div>;
  }

  return (
    <div className="create-project">
      <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:*</label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ:*</label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            required
            rows="5"
          />
        </div>
        <div className="form-row">
          <div className="form-group">
            <label>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</label>
            <select
              name="projectType"
              value={formData.projectType}
              onChange={handleChange}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
              {projectTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤:*</label>
            <input
              type="number"
              name="volunteersRequired"
              value={formData.volunteersRequired}
              onChange={handleChange}
              min="1"
              required
            />
          </div>
        </div>
        <div className="form-row">
          <div className="form-group">
            <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</label>
            <input
              type="date"
              name="startDate"
              value={formData.startDate}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
            <input
              type="date"
              name="endDate"
              value={formData.endDate}
              onChange={handleChange}
            />
          </div>
        </div>
        <div className="form-group">
          <label>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleChange}
            placeholder="–ì–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å..."
          />
        </div>
        <div className="form-group">
          <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*</label>
          <input
            type="text"
            name="contactInfo"
            value={formData.contactInfo}
            onChange={handleContactInfoChange}
            placeholder="Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (+79991234567)"
            required
          />
          <small>–£–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏</small>
        </div>
        <div className="form-group">
          <label>–°—Ç–∞—Ç—É—Å:*</label>
          <select
            name="status"
            value={formData.status}
            onChange={handleChange}
            required
          >
            <option value="DRAFT">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
            <option value="ACTIVE">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
            <option value="COMPLETED">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
            <option value="CANCELLED">–û—Ç–º–µ–Ω–µ–Ω</option>
          </select>
        </div>
        <div className="form-actions">
          <button
            type="submit"
            className="submit-btn"
            disabled={saving}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </button>
          <button
            type="button"
            className="cancel-btn"
            onClick={() => navigate('/profile')}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
}
export default EditProject;